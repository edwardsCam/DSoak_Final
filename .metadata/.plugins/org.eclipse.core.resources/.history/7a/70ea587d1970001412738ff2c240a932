package MessageTester;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;

import org.junit.Test;

import Messages.Message;
import Messages.ProcessSummary;
import SharedObject.MessageNumber;
import SharedObject.ProcessData;

public class ProcessSummaryTester
{
	@Test
	public void test() throws IOException, ClassNotFoundException 
	{
		MessageNumber.LocalProcessId = 100;
		
		ProcessSummary msg1 = new ProcessSummary();
		assertNotNull(msg1.MessageNr);
		assertEquals(100, msg1.MessageNr.ProcessId);
		assertTrue(msg1.MessageNr.SeqNumber > 0);
		assertEquals(msg1.MessageNr, msg1.ConvId);
		
		ProcessData data = new ProcessData();
		data.GameId = 102;
		data.ProcessId = 10;
		data.ProcessType = ProcessData.PossibleProcessType.Player;
		data.LifePoints = 200;
		data.HitPoints = 10;
		data.NumberOfPennies = 11;
		data.NumberOfUnfilledBalloon = 12;
		data.NumberOfFilledBalloon = 13;
		data.NumberOfUnraisedUmbrellas = 14;
		data.HasUmbrellaRaised = true;
             
       ProcessSummary msg2 = new ProcessSummary();
       msg2.Data = data;
       assertNotNull(msg2.MessageNr);
       assertEquals(100, msg2.MessageNr.ProcessId);
       assertEquals(msg1.MessageNr.SeqNumber + 1, msg2.MessageNr.SeqNumber);
       assertEquals(msg2.MessageNr, msg2.ConvId);
       assertNotNull(msg2.Data);
       assertSame(data, msg2.Data);
       
       byte[] bytes = msg2.Encode();
		
       InputStream myInputStream = new ByteArrayInputStream(bytes);
       ObjectInputStream oin = new ObjectInputStream(myInputStream);
       String type = (String) oin.readObject();
       assertTrue(type.equals("ProcessSummary:"));
       
       Message msg3 = Message.Decode(bytes);
       assertTrue(msg3 instanceof ProcessSummary);
       ProcessSummary msg4 = (ProcessSummary) msg3;
       Assert.AreEqual(msg2.MessageNr, msg4.MessageNr);
       Assert.AreEqual(msg2.ConvId, msg4.ConvId);
       Assert.IsNotNull(msg4.Data);
       Assert.AreEqual(msg2.Data.GameId, msg4.Data.GameId);
       Assert.AreEqual(msg2.Data.ProcessId, msg4.Data.ProcessId);
       Assert.AreEqual(msg2.Data.ProcessType, msg4.Data.ProcessType);
       Assert.AreEqual(msg2.Data.LifePoints, msg4.Data.LifePoints);
       Assert.AreEqual(msg2.Data.HitPoints, msg4.Data.HitPoints);
       Assert.AreEqual(msg2.Data.NumberOfPennies, msg4.Data.NumberOfPennies);
       Assert.AreEqual(msg2.Data.NumberOfUnfilledBalloon, msg4.Data.NumberOfUnfilledBalloon);
       Assert.AreEqual(msg2.Data.NumberOfFilledBalloon, msg4.Data.NumberOfFilledBalloon);
       Assert.AreEqual(msg2.Data.NumberOfUnraisedUmbrellas, msg4.Data.NumberOfUnraisedUmbrellas);
       Assert.AreEqual(msg2.Data.HasUmbrellaRaised, msg4.Data.HasUmbrellaRaised);
	}
}