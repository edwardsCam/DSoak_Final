package MessageTester;

import static org.junit.Assert.*;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;

import org.junit.Test;

import Messages.BalloonPurchased;
import Messages.Message;
import SharedObject.Balloon;
import SharedObject.MessageNumber;

public class BalloonPurchasedTester {

	@Test
	public void test_EveryThing() throws NoSuchAlgorithmException, IOException, ClassNotFoundException
	{
		MessageNumber.LocalProcessId = 100;
		
		BalloonPurchased msg1 = new BalloonPurchased();
		assertNotNull(msg1.MessageNr);
		assertNotNull(msg1.ConvId);
		assertTrue(msg1.MessageNr.SeqNumber > 0);
		assertEquals(msg1.MessageNr, msg1.ConvId);
		assertEquals(100, msg1.MessageNr.ProcessId);
		assertEquals(1, msg1.MessageNr.SeqNumber);
		assertEquals(100, msg1.ConvId.ProcessId);
		assertEquals(1, msg1.ConvId.SeqNumber);
		
		Balloon b = new Balloon();
		b.Id = 10;
		b.UnitOfWater = 5;
		
		BalloonPurchased msg2 = new BalloonPurchased();
		msg2.ConvId = msg1.ConvId;
		msg2.Balloon = b;
		
		assertNotNull(msg2.MessageNr);
		assertEquals(100, msg2.MessageNr.ProcessId);
		assertEquals(msg1.MessageNr.SeqNumber +1, msg2.MessageNr.SeqNumber);
		assertEquals(msg1.ConvId, msg2.ConvId);
		assertNotNull(msg2.Balloon);
		assertSame(b, msg2.Balloon);
		assertEquals(5, msg2.Balloon.UnitOfWater);
		assertEquals(10, msg2.Balloon.Id);
		
		byte[] bytes = msg2.Encode();
		 
		BalloonPurchased msg3 = (BalloonPurchased) Message.Decode(bytes);
		
		assertTrue(msg3 instanceof BalloonPurchased);
		assertEquals(msg2.Balloon.UnitOfWater, msg3.Balloon.UnitOfWater);
		assertEquals(msg2.ConvId.ProcessId, msg3.ConvId.ProcessId);
		BalloonPurchased msg4 = (BalloonPurchased) msg3;
		
		assertEquals(msg4.MessageNr, msg3.MessageNr);
		assertEquals(msg4.ConvId, msg3.ConvId);
		assertEquals(msg2.Balloon.Id, msg4.Balloon.Id);
		
		
		  
		
	}

}
