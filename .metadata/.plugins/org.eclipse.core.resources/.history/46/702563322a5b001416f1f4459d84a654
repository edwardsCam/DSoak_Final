package MessageTester;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.security.NoSuchAlgorithmException;

import org.junit.Test;

import Messages.Message;
import Messages.RaiseUmbrella;
import Messages.SetupStream;
import SharedObject.MessageNumber;
import SharedObject.Umbrella;

public class SetupStreamTester
{
	@Test
	public void test_EveryThing() throws NoSuchAlgorithmException, IOException 
	{
		MessageNumber.LocalProcessId = 100;
		
		SetupStream msg1 = new SetupStream();
		assertNotNull(msg1.MessageNr);
		assertEquals(100, msg1.MessageNr.ProcessId);
		assertTrue(msg1.MessageNr.SeqNumber > 0);
		assertEquals(msg1.MessageNr, msg1.ConvId);
		
		SetupStream msg2 = new SetupStream();
		msg2.ConvId = msg1.ConvId;
		assertNotNull(msg2.MessageNr);
		assertTrue(msg2.MessageNr.SeqNumber > 0);
		assertEquals(msg1.MessageNr.SeqNumber + 1, msg2.MessageNr.SeqNumber);
		assertEquals(msg1.MessageNr.ProcessId, msg2.MessageNr.ProcessId);
		assertEquals(msg1.ConvId.ProcessId, msg2.ConvId.ProcessId);
		assertEquals(msg1.ConvId.SeqNumber + 1, msg2.ConvId.SeqNumber);
		
		byte[] bytes = msg2.Encode();
		InputStream myInputStream = new ByteArrayInputStream(bytes);
		ObjectInputStream oin = new ObjectInputStream(myInputStream);
		String type = (String) oin.readObject();
		assertTrue(type.equals("RaiseUmbrella:"));
		
		RaiseUmbrella msg3 = (RaiseUmbrella) Message.Decode(bytes);
		assertNotNull(msg3);
		assertTrue(msg3 instanceof RaiseUmbrella);
		assertEquals(msg2.Umbrella.Id, msg3.Umbrella.Id);
		assertEquals(msg2.MessageNr.ProcessId, msg3.MessageNr.ProcessId);
		assertEquals(msg2.MessageNr.SeqNumber, msg3.MessageNr.SeqNumber);
		assertEquals(msg2.Umbrella.Id, msg3.Umbrella.Id);
		
		RaiseUmbrella msg4 = (RaiseUmbrella) msg3;
		assertTrue(msg4 instanceof RaiseUmbrella);
		assertEquals(msg3.MessageNr, msg4.MessageNr);
		assertEquals(msg3.ConvId, msg4.ConvId);
		assertEquals(msg3.Umbrella.Id, msg4.Umbrella.Id);
		
		assertEquals(msg2.MessageNr.ProcessId, msg4.MessageNr.ProcessId);
		assertEquals(msg2.MessageNr.SeqNumber, msg4.MessageNr.SeqNumber);
		assertEquals(msg2.ConvId.ProcessId, msg4.ConvId.ProcessId);
		assertEquals(msg2.ConvId.SeqNumber, msg4.ConvId.SeqNumber);
		assertEquals(msg2.Umbrella.Id, msg4.Umbrella.Id);
	}

}
