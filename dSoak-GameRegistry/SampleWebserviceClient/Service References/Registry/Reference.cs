//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SampleWebserviceClient.Registry {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Registry.IRegistrar")]
    public interface IRegistrar {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/GetProcessId", ReplyAction="http://tempuri.org/IRegistrar/GetProcessIdResponse")]
        short GetProcessId(SharedObjects.PublicEndPoint ep, string label, SharedObjects.RegistryEntry.ProcessType processType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/GetProcessId", ReplyAction="http://tempuri.org/IRegistrar/GetProcessIdResponse")]
        System.Threading.Tasks.Task<short> GetProcessIdAsync(SharedObjects.PublicEndPoint ep, string label, SharedObjects.RegistryEntry.ProcessType processType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/AmAlive", ReplyAction="http://tempuri.org/IRegistrar/AmAliveResponse")]
        void AmAlive(int processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/AmAlive", ReplyAction="http://tempuri.org/IRegistrar/AmAliveResponse")]
        System.Threading.Tasks.Task AmAliveAsync(int processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/GetGameManagers", ReplyAction="http://tempuri.org/IRegistrar/GetGameManagersResponse")]
        SharedObjects.RegistryEntry[] GetGameManagers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/GetGameManagers", ReplyAction="http://tempuri.org/IRegistrar/GetGameManagersResponse")]
        System.Threading.Tasks.Task<SharedObjects.RegistryEntry[]> GetGameManagersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/GetPlayers", ReplyAction="http://tempuri.org/IRegistrar/GetPlayersResponse")]
        SharedObjects.RegistryEntry[] GetPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/GetPlayers", ReplyAction="http://tempuri.org/IRegistrar/GetPlayersResponse")]
        System.Threading.Tasks.Task<SharedObjects.RegistryEntry[]> GetPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/RegisterGame", ReplyAction="http://tempuri.org/IRegistrar/RegisterGameResponse")]
        SharedObjects.GameInfo RegisterGame(int gameManagerId, string label, int maxPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/RegisterGame", ReplyAction="http://tempuri.org/IRegistrar/RegisterGameResponse")]
        System.Threading.Tasks.Task<SharedObjects.GameInfo> RegisterGameAsync(int gameManagerId, string label, int maxPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/GetGames", ReplyAction="http://tempuri.org/IRegistrar/GetGamesResponse")]
        SharedObjects.GameInfo[] GetGames(SharedObjects.GameInfo.StatusCode status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/GetGames", ReplyAction="http://tempuri.org/IRegistrar/GetGamesResponse")]
        System.Threading.Tasks.Task<SharedObjects.GameInfo[]> GetGamesAsync(SharedObjects.GameInfo.StatusCode status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/GameAmAlive", ReplyAction="http://tempuri.org/IRegistrar/GameAmAliveResponse")]
        void GameAmAlive(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/GameAmAlive", ReplyAction="http://tempuri.org/IRegistrar/GameAmAliveResponse")]
        System.Threading.Tasks.Task GameAmAliveAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/ChangeStatus", ReplyAction="http://tempuri.org/IRegistrar/ChangeStatusResponse")]
        void ChangeStatus(int gameId, SharedObjects.GameInfo.StatusCode status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/ChangeStatus", ReplyAction="http://tempuri.org/IRegistrar/ChangeStatusResponse")]
        System.Threading.Tasks.Task ChangeStatusAsync(int gameId, SharedObjects.GameInfo.StatusCode status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/EndPointReflector", ReplyAction="http://tempuri.org/IRegistrar/EndPointReflectorResponse")]
        string EndPointReflector();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrar/EndPointReflector", ReplyAction="http://tempuri.org/IRegistrar/EndPointReflectorResponse")]
        System.Threading.Tasks.Task<string> EndPointReflectorAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRegistrarChannel : SampleWebserviceClient.Registry.IRegistrar, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegistrarClient : System.ServiceModel.ClientBase<SampleWebserviceClient.Registry.IRegistrar>, SampleWebserviceClient.Registry.IRegistrar {
        
        public RegistrarClient() {
        }
        
        public RegistrarClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RegistrarClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegistrarClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegistrarClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public short GetProcessId(SharedObjects.PublicEndPoint ep, string label, SharedObjects.RegistryEntry.ProcessType processType) {
            return base.Channel.GetProcessId(ep, label, processType);
        }
        
        public System.Threading.Tasks.Task<short> GetProcessIdAsync(SharedObjects.PublicEndPoint ep, string label, SharedObjects.RegistryEntry.ProcessType processType) {
            return base.Channel.GetProcessIdAsync(ep, label, processType);
        }
        
        public void AmAlive(int processId) {
            base.Channel.AmAlive(processId);
        }
        
        public System.Threading.Tasks.Task AmAliveAsync(int processId) {
            return base.Channel.AmAliveAsync(processId);
        }
        
        public SharedObjects.RegistryEntry[] GetGameManagers() {
            return base.Channel.GetGameManagers();
        }
        
        public System.Threading.Tasks.Task<SharedObjects.RegistryEntry[]> GetGameManagersAsync() {
            return base.Channel.GetGameManagersAsync();
        }
        
        public SharedObjects.RegistryEntry[] GetPlayers() {
            return base.Channel.GetPlayers();
        }
        
        public System.Threading.Tasks.Task<SharedObjects.RegistryEntry[]> GetPlayersAsync() {
            return base.Channel.GetPlayersAsync();
        }
        
        public SharedObjects.GameInfo RegisterGame(int gameManagerId, string label, int maxPlayers) {
            return base.Channel.RegisterGame(gameManagerId, label, maxPlayers);
        }
        
        public System.Threading.Tasks.Task<SharedObjects.GameInfo> RegisterGameAsync(int gameManagerId, string label, int maxPlayers) {
            return base.Channel.RegisterGameAsync(gameManagerId, label, maxPlayers);
        }
        
        public SharedObjects.GameInfo[] GetGames(SharedObjects.GameInfo.StatusCode status) {
            return base.Channel.GetGames(status);
        }
        
        public System.Threading.Tasks.Task<SharedObjects.GameInfo[]> GetGamesAsync(SharedObjects.GameInfo.StatusCode status) {
            return base.Channel.GetGamesAsync(status);
        }
        
        public void GameAmAlive(int gameId) {
            base.Channel.GameAmAlive(gameId);
        }
        
        public System.Threading.Tasks.Task GameAmAliveAsync(int gameId) {
            return base.Channel.GameAmAliveAsync(gameId);
        }
        
        public void ChangeStatus(int gameId, SharedObjects.GameInfo.StatusCode status) {
            base.Channel.ChangeStatus(gameId, status);
        }
        
        public System.Threading.Tasks.Task ChangeStatusAsync(int gameId, SharedObjects.GameInfo.StatusCode status) {
            return base.Channel.ChangeStatusAsync(gameId, status);
        }
        
        public string EndPointReflector() {
            return base.Channel.EndPointReflector();
        }
        
        public System.Threading.Tasks.Task<string> EndPointReflectorAsync() {
            return base.Channel.EndPointReflectorAsync();
        }
    }
}
